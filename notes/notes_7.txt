Factorial.py and FactorialT.py
------------------------------
Factorial.py:
------------
factorial_recursion
•	Perform recursive calls first, then take the return value of the recursive call and 
calculate the result.  The result won't be calculated until you have returned from every recursive call.
•	You need to keep stack frames until the recursion is over -- O(n) space. 

factorial_tail_recursion
•	Note that a function inside a function is allowed in Python. 
•	Perform your calculations first and then execute the recursive call, passing the results of 
the current step to the next recursive step. 
•	We are reusing the current stack frame so we will never get stack overflow.
•	Some compliers transfer tail recursive functions into loop. 
•	Procedure is recursive but the process is not.

FactorialT.py:
------------
with self.subTest(): if one of the test fails, this would be the end of test_0. with keeps the test 
going until it goes through all. 
timeit:
•	timeit function takes three arguments.
•	f.__name__ obtains the name of the current function and "(100)" is the argument to the function.
•	"from __main__ import " + f.__name__ imports the definition of the function
•	number = 1000, determine how many times we are going to run the function.
•	The result, t, is printed after multiply it with 1000 because timeit provides results in microseconds 
and we need it in milliseconds.

reduce:
------
- reduce is a higher order function. it takes a function 
  as one of its argument.
- mul is a function from a module called operator. 
  You can think of it as a wrapper for the operator '*'.
- reduce(binary_function, sequence_of_elements[, Seed: base_case_if_seq_is_empty)]

- Note that the initialization is optional. If it's present, 
  it will be placed before the items of the iterable in the calculations. 
  if it's not, and the iterable contain one item, it will return this one item.
 
  reduce(add,[],0] #0
  reduce(add,[])
  error: no initial value

  e.g., reduce(mul, range(1, 4), 1)
  1*1*2*3
  e.g., reduce(add, range(1,5), 1) = 1 + 1 + 2 + 3 + 4 

  write the function reduce: reduce(bf, iterable, seed) 
-------------

variables.py
------------
(1) Shallow copying: A shallow copy also makes a separate new object object or list, but instead of copying the 
child elements to the new object, it simply copies the references to their memory addresses. 
a. b=a[:] 
b. b=copy[a] 

a. Example: b=a[:] 
------------------
>>> from copy import copy
>>> a = [[90, 85, 82], [72, 88, 90]]
>>> b = a[:]
>>> b [0][0] = 30
>>> a
[[30, 85, 82], [72, 88, 90]]
>>> b
[[30, 85, 82], [72, 88, 90]]
>>> a is not b
True

b. Example: b=copy[a] 
-------------------
>>> a = [[90, 85, 82], [72, 88, 90]]
>>> b = copy(a)
>>> b[0][0] = 30
>>> a
[[30, 85, 82], [72, 88, 90]]
>>> b
[[30, 85, 82], [72, 88, 90]]
>>> a is not b
True
----------------

(2) Deep copying: A deep copy makes a new and separate copy of an entire object 
or list with its own unique memory address. 

Example:
---------
>>> from copy import deepcopy
>>> a = [[90, 85, 82], [72, 88, 90]]
>>> b = deepcopy(a)
>>> b[0][0] = 30
>>> a
[[90, 85, 82], [72, 88, 90]]
>>> b
[[30, 85, 82], [72, 88, 90]]
>>> a is not b
True
>>>

---------------------
Caches.py
---------
Python caches certain ranges of commonly-used immutable types.

Python in the interactive interpreter caches [-5, 256] but in a file the behavior is different since 
the file is preprocessed.

Example on the inconsistent behavior of interactive vs script python.
>>> a = 257
>>> b = 257
>>> a is b 
False # ?
>>> a = 257; b = 257; a is b
True # ?

Why?
What you see is the Python interpreter optimizing identical literals when part of the same text.
(i.e., In a file, the interpreter can preprocess all of the code, before actually running it.)


