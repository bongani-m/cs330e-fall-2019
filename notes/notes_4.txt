Recall: Phase I involved understanding the structure of the project.
Project structure: 
(1) Kernel: Collatz.py
- Collatz_solve(r, w)
- Collatz_eval(i, j)
- w.write(): writes a string to a writer, w.

(2) Run Harness: RunCollatz.py
- Sys.stdin: keyboard
- Sys.stdout: console
- RunCollatz.py < RunCollatz.in > RunCollatz.out
RunCollatz.py will receive input from RunCollatz.in (rather than from the keyboard)
and will forwards the output to RunCollatz.out (rather than to the console)

(3) Test Harness: TestCollatz.py
Tests the methods in Collatz.py
Read, eval, print, and solve
r = StringIO("...") read from
w = StringIO() write to
StringIO implements a file-like class that reads and writes a string buffer.
w.getvalue(): reads a string from a file.

(4) Unit tests vs acceptance tests
acceptance tests are a form of black box testing
unit tests are a form of white box testing

Unit tests and acceptance tests only check valid inputs.

(5) Requirements.txt
Pip freeze > requirements.txt

(6) .gitlab-ci.yml
You need to have this file in the root of your repo, each time you push, it will automatically trigger 
your CI pipeline.

In Phase #2 of the project, you need to do the following.
(1) Fix the unit tests in TestCollatz.py
    Valid maximum cycle length values can be obtained using Collatz Calculator at

    https://www.uvatoolkit.com/problemssolve.php

    - Click on the 3n+1 problem
    - In the "Input:" box, enter an interval, for example 1 10
    - then hit the button "Generate output"
    - you will see the corresponding maximum cycle length in the "Output:" box

(2) Run the unit tests 
    This can be achieved in many ways by either 
    2.1 - "make tests"
    You may receive an error message as follows:
    "make: *** [TestCollatz.tmp] Error 1"

    Where can you check to see what went wrong?

    Note: Each time you need to run "make test", you need to run "make clean".

    2.2 - "python TestCollatz.py"

(3) Fix the method "collatz_eval" in "Collatz.py" by providing the correct implementation.

(4) Fix the acceptance tests in "RunCollatz.out" and "RunCollatz.in"
    You may use the Collatz Calculator mentions in (1).

(5) After fixing unit tests, "collatz_eval", and acceptance tests, 
    run "make test" (remember to run "make clean" before you run "make test.)

(5) RunCollatz.out: you may need to mannually update this file after you finish each phase of the project  
   This file represents acceptance tests and must have correspondence with RunCollatz.in.
   Can be created using the online Collatz calculator: 
   https://www.uvatoolkit.com/problemssolve.php

(6) TestCollatz.out: you need to manually update this file after you finish each phase of the project
$ mv TestCollatz.tmp TestCollatz.out

(7) Continuous integration:
    Is the process of automatically building and testing your code.

    - Building and integrating the code will be performed on GitLab.
    - To inform GitLab to perform continuous intgeration, you need to include 
    a file ".gitlab-ci.yml" in your project's folder.
    - If the file ".gitlab-ci.yml" exists in your project's folder and contains the proper
    instructions, then each time you push to remote, gitlab will automatically build and test your code. 

    Files that starts with a "." are hidden files. If you use the "ls" command, you may not be able to see them. 
    You may use "ls -al" instead.

(8) ".gitignore"
    It contains a list of files you want git to avoid pushing them to remote. 
    For example, In Mac OS, ".DS_Store" hidden files exists in all your directories 
    You want git to ignore them, so you add ".DS_Store" as a line in ".gitignore"

Phase III:
- Cache
   Lazy cache caches values upon requests
   eager cache caches before all requests
   meta cache

   limits of input are: 1, 999,999

   start with a cache of 1,000,000 and play with smaller sizes

   ranges that produce max cycle lengths

   1-1000, 1000-2000, 2000-3000, 3000-4000, 4000-5000, etc.

   cycle_length(1500, 4500)
   look up: 2000-3000, 3000-4000
   compute: 1500-2000, 4000-4500

-  SPOJ
