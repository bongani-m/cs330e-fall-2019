Reduce.py:
---------
reduce_for_range (bf, a, v) demands a to be indexable.
reduce_for (bf, a, v) does NOT demand a to indexable. It should only be iterable.

iteration.py: 
------------
Iterables:
- an iterable is an object that you can iterate through.
- iterables usually have the property "__getitem__" 
  that indicates an object is indexable.

>>> x=[2, 3, 4]
>>> hasattr(x, "__iter__")
True
>>> hasattr(x, "__getitem__")
True
>>> hasattr(x, "__next__")
False

Iterators vs generators:
- an iterator object is an object that has the "__iter__" and "__next__" attribute.
- you can get an iterator out of an iterable using iter function.
- a Generator is a function that produces 
  a sequence of results instead of a single value.
- every generator is an iterator.

iter(): takes an iterable object and returns an iterator.
>>> x=[2, 3, 4]
>>> p = iter(x)
>>> next(p)
2
>>> next(p)
3
>>> next(p)
4
>>> next(p)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
>>>
-----
Notes:

1. Use len() to check if an iterable is empty (len(iterable) == 0). 
The function len() can be used on lists but not on iterable objects in general:
 
b = iter([1,2,3]) # b is both an iterator and an iterable.
len(b) # TypeError: object of type 'list_iterator' has no len()

b = iter([1,2,3])
assert list(filter(lambda x: x % 2 == 0, b)) == [2] # this works for the real filter

2. A common mistake is to compare the iterable to the empty list (iterable == []) 
while iterable can be tuples, sets, ...

3. Another common one is to convert the iterable to a list (list(iterable) == []). 
This works for all finite iterable objects but won't work for infinite iterable objects 
(such as in count or repeat).

4. it's wrong to use next() on an iterable. The function next() can be used 
on an iterator but not on an iterable:

a = [1,2,3]
next(a) # TypeError: 'list' object is not an iterator
assert next(iter(a)) == 1 # this works