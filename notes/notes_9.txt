Comprehensions.py
-----------------
filter(predicate, list_of_inputs)
filter is a generator takes a predicate, it applies the predicate 
on the given iterable returns the element that satisfies the predicate.
It's an iterator, i.e., it returns itself.
Exercise: Write up a filter function

# function that has yield in it
def filter(up, a) : # up is a unary predicate, a is an iterable
    for v in a :
        if up(v) :
	        yield v
# comprehension in parenthesis
def filter(up, a) :
	return (v for v in a if up(v))

"|=" union of sets

Lines 174: all() # takes an iterable, return true if all its members are evaluated to true
A(): instance of a class
True
...
all([]) = True
Lines 186: any() # takes an iterable, return true if at least one of its members is evaluated to true.
any([]) = False

FunctionKeywords.py
Note 1: the specified "by name" arguments should have corresponds with the names 
in the function signature as parameters.
Note 2: In the functional call, when you mix "by position" and "by name" arguments, 
arguments passed "by position" should come first. 
Then the remainder by name (the order of the arguments passed by name does not matter)

FunctionDefaults.py
In function definition, non-default arguments cannot follow default arguments.

FunctionUnpacking.py
ordering of unpacking (When calling a function and passing a parameter – 
by position, by variable name, or by unpacking):
- position must precede variables. 
- variables and unpacking (order does not matter): unpacking first, assign values of unpacking to parameters in order. Then, assign variables. Note that there might be name conflict for example
>>> def f (x, y, z) :
...     return [x, y, z]
...
>>> t = (3, 4)
>>>
>>> assert f(z = 2, *t) == [3, 4, 2]
>>> assert f(*t, z = 2) == [3, 4, 2]
>>> assert f(*t, x = 2) == [3, 4, 2]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: f() got multiple values for argument 'x'

>>> assert f(2, *t) == [2, 3, 4]
>>> assert f(*t, 2) == [3, 4, 2]
>>>