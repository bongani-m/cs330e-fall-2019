In project 1, you'll work with two projects (or repos):
- public code repo: https://gitlab.com/fareszf/cs330e-collatz.git
- public test repo: https://gitlab.com/fareszf/cs330e-collatz-tests.git

Project structure: 
(1) Kernel: Collatz.py
- Collatz_solve(r, w)
- Collatz_eval(i, j)
- w.write(): writes a string to a writer, w.

(2) Run Harness: RunCollatz.py
- Sys.stdin: keyboard
- Sys.stdout: console
- RunCollatz.py < RunCollatz.in > RunCollatz.out
RunCollatz.py will receive input from RunCollatz.in (rather than from the keyboard)
and will forwards the output to RunCollatz.out (rather than to the console)

(3) Test Harness: TestCollatz.py
Tests the methods in Collatz.py
Read, eval, print, and solve
r = StringIO("...") read from
w = StringIO() write to
StringIO implements a file-like class that reads and writes a string buffer.
w.getvalue(): reads a string from a file.

(4) coverage:
     Test coverage or code coverage is used to measure the percent of your code covered by a test. 
     Coverage testing only checks whether or not a test is present. It does not check the quality of the test.

     --branch: to activate branch coverage otherwise only statement coverage is measured
     -m flag: shows the line number of missing statements

Coverage output:
     Stmts, or code statements, indicate the number of lines of code that could be tested. 
     Miss, or Missed lines, indicates the number of lines that are not executed by the unit tests. 
     Cover, or Coverage, is the percentage of code covered by the current tests 
        (equivalent to (Stmts - Miss)/Stmts).
     Branch
     BrPart: Partial Branches
     Cover, or Coverage, is the percentage of code covered by the current tests 
        (equivalent to (Stmts - Miss)/Stmts).

source: https://coverage.readthedocs.io/en/coverage-4.2/cmd.html
        https://coverage.readthedocs.io/en/coverage-4.2/branch.html
