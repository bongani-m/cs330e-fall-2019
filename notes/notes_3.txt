In project 1, you'll work with two projects (or repos):
- public code repo: https://gitlab.com/fareszf/cs330e-collatz.git
- public test repo: https://gitlab.com/fareszf/cs330e-collatz-tests.git

Project structure: 
(1) Kernel: Collatz.py
- Collatz_solve(r, w)
- Collatz_eval(i, j)
- w.write(): writes a string to a writer, w.

(2) Run Harness: RunCollatz.py
- Sys.stdin: keyboard
- Sys.stdout: console
- RunCollatz.py < RunCollatz.in > RunCollatz.out
RunCollatz.py will receive input from RunCollatz.in (rather than from the keyboard)
and will forwards the output to RunCollatz.out (rather than to the console)

(3) Test Harness: TestCollatz.py
Tests the methods in Collatz.py
Read, eval, print, and solve
r = StringIO("...") read from
w = StringIO() write to
StringIO implements a file-like class that reads and writes a string buffer.
w.getvalue(): reads a string from a file.

(4) RunCollatz.out: you may need to mannually update this file after you finish each phase of the project  
   This file represents acceptance tests and must have correspondence with RunCollatz.in.
   Can be created using the online Collatz calculator: 
   https://www.uvatoolkit.com/problemssolve.php

(5) TestCollatz.out: you need to manually update this file after you finish each phase of the project
$ mv TestCollatz.tmp TestCollatz.out

(6) Unit tests vs acceptance tests
acceptance tests are a form of black box testing
unit tests are a form of white box testing

Unit tests and acceptance tests only check valid inputs.

(7) Requirements.txt
Pip freeze > requirements.txt

(8) .gitlab-ci.yml
You need to have this file in the root of your repo, each time you push, it will automatically trigger 
your CI pipeline.

(8) Cache
   Lazy cache caches values upon requests
   eager cache caches before all requests
   meta cache

   limits of input are: 1, 999,999

   start with a cache of 1,000,000 and play with smaller sizes

   ranges that produce max cycle lengths

   1-1000, 1000-2000, 2000-3000, 3000-4000, 4000-5000, etc.

   cycle_length(1500, 4500)
   look up: 2000-3000, 3000-4000
   compute: 1500-2000, 4000-4500

(9)  SPOJ

(10) coverage:
     Test coverage or code coverage is used to measure the percent of your code covered by a test. 
     Coverage testing only checks whether or not a test is present. It does not check the quality of the test.

     --branch: to activate branch coverage otherwise only statement coverage is measured
     -m flag: shows the line number of missing statements

Coverage output:
     Stmts, or code statements, indicate the number of lines of code that could be tested. 
     Miss, or Missed lines, indicates the number of lines that are not executed by the unit tests. 
     Cover, or Coverage, is the percentage of code covered by the current tests 
        (equivalent to (Stmts - Miss)/Stmts).
     Branch
     BrPart: Partial Branches
     Cover, or Coverage, is the percentage of code covered by the current tests 
        (equivalent to (Stmts - Miss)/Stmts).

source: https://coverage.readthedocs.io/en/coverage-4.2/cmd.html
        https://coverage.readthedocs.io/en/coverage-4.2/branch.html