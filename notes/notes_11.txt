FunctionDefaults.py
In function definition, non-default arguments cannot follow default arguments.

FunctionUnpacking.py
ordering of unpacking (When calling a function and passing a parameter â€“ 
by position, by variable name, or by unpacking):
- position must precede variables. 
- variables and unpacking (order does not matter): unpacking first, assign values of unpacking to parameters in order. Then, assign variables. Note that there might be name conflict for example
>>> def f (x, y, z) :
...     return [x, y, z]
...
>>> t = (3, 4)
>>>
>>> assert f(z = 2, *t) == [3, 4, 2]
>>> assert f(*t, z = 2) == [3, 4, 2]
>>> assert f(*t, x = 2) == [3, 4, 2]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: f() got multiple values for argument 'x'

>>> assert f(2, *t) == [2, 3, 4]
>>> assert f(*t, 2) == [3, 4, 2]
>>>

FunctionTuple.py
----------------
Note that iterable packing opens the door for optional parameters.
- *t as an argument (in a function call) means unpacking
- *t as a parameter (in a function definition) in the function signature means packing

FunctionDict.py
- **t as an argument (in a function call) means unpacking
- **t as a parameter (in a function definition) in the function signature means packing

Rules above applies in addition to the following: * (unpacking iterable) must precede ** (unpacking dictionary).
Syntax: 
position should come before name
position should come before unpacking dict
unpacking iterable should come before unpacking dict

Semantic: {By position, unpacking iterable}, by variable name, unpacking dictionary.
